<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.groovy.supporter.manager.dao.MethodDOMapper">
  <resultMap id="BaseResultMap" type="com.groovy.supporter.common.domain.MethodDO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="app_key" jdbcType="VARCHAR" property="appKey" />
    <result column="method_signature_md5" jdbcType="VARCHAR" property="methodSignatureMd5" />
    <result column="belong_to_class_name_md5" jdbcType="VARCHAR" property="belongToClassNameMd5" />
    <result column="belong_to_class_name" jdbcType="VARCHAR" property="belongToClassName" />
    <result column="method_short_name" jdbcType="VARCHAR" property="methodShortName" />
    <result column="method_signature" jdbcType="VARCHAR" property="methodSignature" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="create_ts" jdbcType="TIMESTAMP" property="createTs" />
    <result column="update_ts" jdbcType="TIMESTAMP" property="updateTs" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, app_key, method_signature_md5, belong_to_class_name_md5, belong_to_class_name, 
    method_short_name, method_signature, `status`, create_ts, update_ts
  </sql>
  <select id="selectByExample" parameterType="com.groovy.supporter.common.domain.MethodDOExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_method
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_method
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByPrimaryKeyWithLogicalDelete" parameterType="map" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_method
    where id = #{id,jdbcType=BIGINT}
      and `status` = 
    <choose>
      <when test="andLogicalDeleted">
        0
      </when>
      <otherwise>
        1
      </otherwise>
    </choose>
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_method
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.groovy.supporter.common.domain.MethodDOExample">
    delete from t_method
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.groovy.supporter.common.domain.MethodDO">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_method (app_key, method_signature_md5, belong_to_class_name_md5, 
      belong_to_class_name, method_short_name, method_signature, 
      `status`, create_ts, update_ts
      )
    values (#{appKey,jdbcType=VARCHAR}, #{methodSignatureMd5,jdbcType=VARCHAR}, #{belongToClassNameMd5,jdbcType=VARCHAR}, 
      #{belongToClassName,jdbcType=VARCHAR}, #{methodShortName,jdbcType=VARCHAR}, #{methodSignature,jdbcType=VARCHAR}, 
      #{status,jdbcType=TINYINT}, #{createTs,jdbcType=TIMESTAMP}, #{updateTs,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    <selectKey keyProperty="record.id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into t_method
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.appKey != null">
            app_key,
          </if>
          <if test="record.methodSignatureMd5 != null">
            method_signature_md5,
          </if>
          <if test="record.belongToClassNameMd5 != null">
            belong_to_class_name_md5,
          </if>
          <if test="record.belongToClassName != null">
            belong_to_class_name,
          </if>
          <if test="record.methodShortName != null">
            method_short_name,
          </if>
          <if test="record.methodSignature != null">
            method_signature,
          </if>
          <if test="record.status != null">
            `status`,
          </if>
          <if test="record.createTs != null">
            create_ts,
          </if>
          <if test="record.updateTs != null">
            update_ts,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.appKey != null">
            #{record.appKey,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignatureMd5 != null">
            #{record.methodSignatureMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassNameMd5 != null">
            #{record.belongToClassNameMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassName != null">
            #{record.belongToClassName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodShortName != null">
            #{record.methodShortName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignature != null">
            #{record.methodSignature,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            #{record.status,jdbcType=TINYINT},
          </if>
          <if test="record.createTs != null">
            #{record.createTs,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTs != null">
            #{record.updateTs,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.groovy.supporter.common.domain.MethodDOExample" resultType="java.lang.Long">
    select count(*) from t_method
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_method
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.appKey != null">
            app_key = #{record.appKey,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignatureMd5 != null">
            method_signature_md5 = #{record.methodSignatureMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassNameMd5 != null">
            belong_to_class_name_md5 = #{record.belongToClassNameMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassName != null">
            belong_to_class_name = #{record.belongToClassName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodShortName != null">
            method_short_name = #{record.methodShortName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignature != null">
            method_signature = #{record.methodSignature,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            `status` = #{record.status,jdbcType=TINYINT},
          </if>
          <if test="record.createTs != null">
            create_ts = #{record.createTs,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTs != null">
            update_ts = #{record.updateTs,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_method
    set id = #{record.id,jdbcType=BIGINT},
      app_key = #{record.appKey,jdbcType=VARCHAR},
      method_signature_md5 = #{record.methodSignatureMd5,jdbcType=VARCHAR},
      belong_to_class_name_md5 = #{record.belongToClassNameMd5,jdbcType=VARCHAR},
      belong_to_class_name = #{record.belongToClassName,jdbcType=VARCHAR},
      method_short_name = #{record.methodShortName,jdbcType=VARCHAR},
      method_signature = #{record.methodSignature,jdbcType=VARCHAR},
      `status` = #{record.status,jdbcType=TINYINT},
      create_ts = #{record.createTs,jdbcType=TIMESTAMP},
      update_ts = #{record.updateTs,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update t_method
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.appKey != null">
            app_key = #{record.appKey,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignatureMd5 != null">
            method_signature_md5 = #{record.methodSignatureMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassNameMd5 != null">
            belong_to_class_name_md5 = #{record.belongToClassNameMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassName != null">
            belong_to_class_name = #{record.belongToClassName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodShortName != null">
            method_short_name = #{record.methodShortName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignature != null">
            method_signature = #{record.methodSignature,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            `status` = #{record.status,jdbcType=TINYINT},
          </if>
          <if test="record.createTs != null">
            create_ts = #{record.createTs,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTs != null">
            update_ts = #{record.updateTs,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.groovy.supporter.common.domain.MethodDO">
    update t_method
    set app_key = #{appKey,jdbcType=VARCHAR},
      method_signature_md5 = #{methodSignatureMd5,jdbcType=VARCHAR},
      belong_to_class_name_md5 = #{belongToClassNameMd5,jdbcType=VARCHAR},
      belong_to_class_name = #{belongToClassName,jdbcType=VARCHAR},
      method_short_name = #{methodShortName,jdbcType=VARCHAR},
      method_signature = #{methodSignature,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=TINYINT},
      create_ts = #{createTs,jdbcType=TIMESTAMP},
      update_ts = #{updateTs,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectOneByExample" parameterType="com.groovy.supporter.common.domain.MethodDOExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_method
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    insert into t_method
    (app_key, method_signature_md5, belong_to_class_name_md5, belong_to_class_name, method_short_name, 
      method_signature, `status`, create_ts, update_ts)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.appKey,jdbcType=VARCHAR}, #{item.methodSignatureMd5,jdbcType=VARCHAR}, #{item.belongToClassNameMd5,jdbcType=VARCHAR}, 
        #{item.belongToClassName,jdbcType=VARCHAR}, #{item.methodShortName,jdbcType=VARCHAR}, 
        #{item.methodSignature,jdbcType=VARCHAR}, #{item.status,jdbcType=TINYINT}, #{item.createTs,jdbcType=TIMESTAMP}, 
        #{item.updateTs,jdbcType=TIMESTAMP})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" keyColumn="id" keyProperty="list.id" parameterType="map" useGeneratedKeys="true">
    insert into t_method (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'app_key'.toString() == column.value">
          #{item.appKey,jdbcType=VARCHAR}
        </if>
        <if test="'method_signature_md5'.toString() == column.value">
          #{item.methodSignatureMd5,jdbcType=VARCHAR}
        </if>
        <if test="'belong_to_class_name_md5'.toString() == column.value">
          #{item.belongToClassNameMd5,jdbcType=VARCHAR}
        </if>
        <if test="'belong_to_class_name'.toString() == column.value">
          #{item.belongToClassName,jdbcType=VARCHAR}
        </if>
        <if test="'method_short_name'.toString() == column.value">
          #{item.methodShortName,jdbcType=VARCHAR}
        </if>
        <if test="'method_signature'.toString() == column.value">
          #{item.methodSignature,jdbcType=VARCHAR}
        </if>
        <if test="'status'.toString() == column.value">
          #{item.status,jdbcType=TINYINT}
        </if>
        <if test="'create_ts'.toString() == column.value">
          #{item.createTs,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_ts'.toString() == column.value">
          #{item.updateTs,jdbcType=TIMESTAMP}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
  <update id="logicalDeleteByExample" parameterType="map">
    update t_method set status = 0
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="logicalDeleteByPrimaryKey" parameterType="java.lang.Long">
    update t_method set status = 0
    where id = #{id,jdbcType=BIGINT}
  </update>
  <insert id="upsertSelective" keyColumn="id" keyProperty="record.id" parameterType="map" useGeneratedKeys="true">
    insert into t_method
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.appKey != null">
            app_key,
          </if>
          <if test="record.methodSignatureMd5 != null">
            method_signature_md5,
          </if>
          <if test="record.belongToClassNameMd5 != null">
            belong_to_class_name_md5,
          </if>
          <if test="record.belongToClassName != null">
            belong_to_class_name,
          </if>
          <if test="record.methodShortName != null">
            method_short_name,
          </if>
          <if test="record.methodSignature != null">
            method_signature,
          </if>
          <if test="record.status != null">
            `status`,
          </if>
          <if test="record.createTs != null">
            create_ts,
          </if>
          <if test="record.updateTs != null">
            update_ts,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.appKey != null">
            #{record.appKey,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignatureMd5 != null">
            #{record.methodSignatureMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassNameMd5 != null">
            #{record.belongToClassNameMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassName != null">
            #{record.belongToClassName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodShortName != null">
            #{record.methodShortName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignature != null">
            #{record.methodSignature,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            #{record.status,jdbcType=TINYINT},
          </if>
          <if test="record.createTs != null">
            #{record.createTs,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTs != null">
            #{record.updateTs,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    on duplicate key update 
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.appKey != null">
            app_key = #{record.appKey,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignatureMd5 != null">
            method_signature_md5 = #{record.methodSignatureMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassNameMd5 != null">
            belong_to_class_name_md5 = #{record.belongToClassNameMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassName != null">
            belong_to_class_name = #{record.belongToClassName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodShortName != null">
            method_short_name = #{record.methodShortName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignature != null">
            method_signature = #{record.methodSignature,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            `status` = #{record.status,jdbcType=TINYINT},
          </if>
          <if test="record.createTs != null">
            create_ts = #{record.createTs,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTs != null">
            update_ts = #{record.updateTs,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <update id="upsertByExampleSelective" parameterType="map">
    update t_method
    set
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.appKey != null">
            app_key = #{record.appKey,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignatureMd5 != null">
            method_signature_md5 = #{record.methodSignatureMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassNameMd5 != null">
            belong_to_class_name_md5 = #{record.belongToClassNameMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassName != null">
            belong_to_class_name = #{record.belongToClassName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodShortName != null">
            method_short_name = #{record.methodShortName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignature != null">
            method_signature = #{record.methodSignature,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            `status` = #{record.status,jdbcType=TINYINT},
          </if>
          <if test="record.createTs != null">
            create_ts = #{record.createTs,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTs != null">
            update_ts = #{record.updateTs,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    ;
    insert into t_method
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.id != null">
            id,
          </if>
          <if test="record.appKey != null">
            app_key,
          </if>
          <if test="record.methodSignatureMd5 != null">
            method_signature_md5,
          </if>
          <if test="record.belongToClassNameMd5 != null">
            belong_to_class_name_md5,
          </if>
          <if test="record.belongToClassName != null">
            belong_to_class_name,
          </if>
          <if test="record.methodShortName != null">
            method_short_name,
          </if>
          <if test="record.methodSignature != null">
            method_signature,
          </if>
          <if test="record.status != null">
            `status`,
          </if>
          <if test="record.createTs != null">
            create_ts,
          </if>
          <if test="record.updateTs != null">
            update_ts,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            #{record.id,jdbcType=BIGINT},
          </if>
          <if test="record.appKey != null">
            #{record.appKey,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignatureMd5 != null">
            #{record.methodSignatureMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassNameMd5 != null">
            #{record.belongToClassNameMd5,jdbcType=VARCHAR},
          </if>
          <if test="record.belongToClassName != null">
            #{record.belongToClassName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodShortName != null">
            #{record.methodShortName,jdbcType=VARCHAR},
          </if>
          <if test="record.methodSignature != null">
            #{record.methodSignature,jdbcType=VARCHAR},
          </if>
          <if test="record.status != null">
            #{record.status,jdbcType=TINYINT},
          </if>
          <if test="record.createTs != null">
            #{record.createTs,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTs != null">
            #{record.updateTs,jdbcType=TIMESTAMP},
          </if>
        </trim>
      </otherwise>
    </choose>
    from dual where not exists
    (
    select 1 from t_method
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    )
  </update>
  <insert id="upsert" keyColumn="id" keyProperty="id" parameterType="com.groovy.supporter.common.domain.MethodDO" useGeneratedKeys="true">
    insert into t_method
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      app_key,
      method_signature_md5,
      belong_to_class_name_md5,
      belong_to_class_name,
      method_short_name,
      method_signature,
      `status`,
      create_ts,
      update_ts,
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      #{appKey,jdbcType=VARCHAR},
      #{methodSignatureMd5,jdbcType=VARCHAR},
      #{belongToClassNameMd5,jdbcType=VARCHAR},
      #{belongToClassName,jdbcType=VARCHAR},
      #{methodShortName,jdbcType=VARCHAR},
      #{methodSignature,jdbcType=VARCHAR},
      #{status,jdbcType=TINYINT},
      #{createTs,jdbcType=TIMESTAMP},
      #{updateTs,jdbcType=TIMESTAMP},
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        id = #{id,jdbcType=BIGINT},
      </if>
      app_key = #{appKey,jdbcType=VARCHAR},
      method_signature_md5 = #{methodSignatureMd5,jdbcType=VARCHAR},
      belong_to_class_name_md5 = #{belongToClassNameMd5,jdbcType=VARCHAR},
      belong_to_class_name = #{belongToClassName,jdbcType=VARCHAR},
      method_short_name = #{methodShortName,jdbcType=VARCHAR},
      method_signature = #{methodSignature,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=TINYINT},
      create_ts = #{createTs,jdbcType=TIMESTAMP},
      update_ts = #{updateTs,jdbcType=TIMESTAMP},
    </trim>
  </insert>
  <update id="upsertByExample" parameterType="map">
    update t_method
    set
    <trim suffixOverrides=",">
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      app_key = #{record.appKey,jdbcType=VARCHAR},
      method_signature_md5 = #{record.methodSignatureMd5,jdbcType=VARCHAR},
      belong_to_class_name_md5 = #{record.belongToClassNameMd5,jdbcType=VARCHAR},
      belong_to_class_name = #{record.belongToClassName,jdbcType=VARCHAR},
      method_short_name = #{record.methodShortName,jdbcType=VARCHAR},
      method_signature = #{record.methodSignature,jdbcType=VARCHAR},
      `status` = #{record.status,jdbcType=TINYINT},
      create_ts = #{record.createTs,jdbcType=TIMESTAMP},
      update_ts = #{record.updateTs,jdbcType=TIMESTAMP},
    </trim>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    ;
    insert into t_method
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="record.id != null">
        id,
      </if>
      app_key,
      method_signature_md5,
      belong_to_class_name_md5,
      belong_to_class_name,
      method_short_name,
      method_signature,
      `status`,
      create_ts,
      update_ts,
    </trim>
    select
    <trim suffixOverrides=",">
      <if test="record.id != null">
        #{record.id,jdbcType=BIGINT},
      </if>
      #{record.appKey,jdbcType=VARCHAR},
      #{record.methodSignatureMd5,jdbcType=VARCHAR},
      #{record.belongToClassNameMd5,jdbcType=VARCHAR},
      #{record.belongToClassName,jdbcType=VARCHAR},
      #{record.methodShortName,jdbcType=VARCHAR},
      #{record.methodSignature,jdbcType=VARCHAR},
      #{record.status,jdbcType=TINYINT},
      #{record.createTs,jdbcType=TIMESTAMP},
      #{record.updateTs,jdbcType=TIMESTAMP},
    </trim>
    from dual where not exists
    (
    select 1 from t_method
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    )
  </update>
  <insert id="batchUpsertSelective" parameterType="map">
    insert into t_method (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=BIGINT}
        </if>
        <if test="'app_key'.toString() == column.value">
          #{item.appKey,jdbcType=VARCHAR}
        </if>
        <if test="'method_signature_md5'.toString() == column.value">
          #{item.methodSignatureMd5,jdbcType=VARCHAR}
        </if>
        <if test="'belong_to_class_name_md5'.toString() == column.value">
          #{item.belongToClassNameMd5,jdbcType=VARCHAR}
        </if>
        <if test="'belong_to_class_name'.toString() == column.value">
          #{item.belongToClassName,jdbcType=VARCHAR}
        </if>
        <if test="'method_short_name'.toString() == column.value">
          #{item.methodShortName,jdbcType=VARCHAR}
        </if>
        <if test="'method_signature'.toString() == column.value">
          #{item.methodSignature,jdbcType=VARCHAR}
        </if>
        <if test="'status'.toString() == column.value">
          #{item.status,jdbcType=TINYINT}
        </if>
        <if test="'create_ts'.toString() == column.value">
          #{item.createTs,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_ts'.toString() == column.value">
          #{item.updateTs,jdbcType=TIMESTAMP}
        </if>
      </foreach>
      )
    </foreach>
    on duplicate key update 
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName} = values(${column.escapedColumnName})
    </foreach>
  </insert>
  <insert id="batchUpsert" parameterType="map">
    insert into t_method
    (id, app_key, method_signature_md5, belong_to_class_name_md5, belong_to_class_name, 
      method_short_name, method_signature, `status`, create_ts, update_ts)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=BIGINT}, #{item.appKey,jdbcType=VARCHAR}, #{item.methodSignatureMd5,jdbcType=VARCHAR}, 
        #{item.belongToClassNameMd5,jdbcType=VARCHAR}, #{item.belongToClassName,jdbcType=VARCHAR}, 
        #{item.methodShortName,jdbcType=VARCHAR}, #{item.methodSignature,jdbcType=VARCHAR}, 
        #{item.status,jdbcType=TINYINT}, #{item.createTs,jdbcType=TIMESTAMP}, #{item.updateTs,jdbcType=TIMESTAMP}
        )
    </foreach>
    on duplicate key update 
    id = values(id),
    app_key = values(app_key),
    method_signature_md5 = values(method_signature_md5),
    belong_to_class_name_md5 = values(belong_to_class_name_md5),
    belong_to_class_name = values(belong_to_class_name),
    method_short_name = values(method_short_name),
    method_signature = values(method_signature),
    `status` = values(`status`),
    create_ts = values(create_ts),
    update_ts = values(update_ts)
  </insert>
</mapper>